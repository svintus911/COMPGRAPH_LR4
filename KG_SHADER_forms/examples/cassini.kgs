<?xml version="1.0" encoding="utf-8"?>
<project vert=" varying vec2 texCoord;&#xD; varying vec3 Normal;&#xD; varying vec3 Position;&#xD; &#xD; void main(void)&#xD; {&#xD;    gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix*gl_Vertex;&#xD;    Position = gl_Vertex.xyz;&#xD;    gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;&#xD;    texCoord = gl_TexCoord[0].xy;&#xD;    Normal = normalize(gl_Normal);&#xD; }" pix="varying vec2 texCoord;  &#xD;uniform vec2 size;&#xD;uniform int iTime;&#xD;uniform vec2 iResolution; &#xD;&#xD;&#xD;// https://en.wikipedia.org/wiki/Cassini_oval&#xD;bool curve(in float x, in float y, in float start, out float r)&#xD;{&#xD;    float a = 1.0;&#xD;    float c = (abs(fract(start + iTime*0.00012)*1.3)+0.7)*a;&#xD;    r=abs( (x*x+y*y)*(x*x+y*y)-2.0*c*c*(x*x-y*y) - c*c*c*c+a*a*a*a) ;&#xD;    if  (r &lt;= 0.013)&#xD;       return true;&#xD;    else &#xD;        return false;&#xD;    &#xD;}&#xD;&#xD;void main( void )&#xD;{&#xD;&#x9;&#xD;&#x9;&#xD;&#x9;vec2 uv = texCoord.xy;&#xD;    uv.x*=iResolution.x/iResolution.y;&#xD;&#xD;&#xD;    &#xD;    float u = uv.x*2.0-1.0*iResolution.x/iResolution.y;&#xD;    float v = uv.y*2.0-1.0;&#xD;      &#xD;    gl_FragColor = vec4(0,0,0,1);&#xD;    &#xD;    for (float t=0.0; t&lt;1.0;t+=0.04)&#xD;    {&#xD;        float r;&#xD;    &#x9;curve(u,v,t,r);&#xD;        float col = 1.0/(r*300.0);&#xD;        gl_FragColor += vec4(col*(sin(t*3.14)+2.0),&#xD;&#x9;&#x9;                     col*(cos(t*3.14)+2.0),&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; col,&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; 1.0);&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//*vec4(uv+Time, 1.0, 1.0);&#xD;    }&#xD;    &#xD;     &#xD;    &#xD;}" t0="" t1="" t2="" t3="" />